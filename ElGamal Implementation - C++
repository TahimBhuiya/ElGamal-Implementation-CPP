// Tahim Bhuiya
// ElGamal Implementation in C++ 
#include <iostream>
#include <vector>
#include <cmath>
#include <ctime>
#include <cstdlib>
#include <string>
#include <tuple>
using namespace std;

// Greatest Common Divisor
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}

// Modular Exponentiation (Square-and-Multiply)
int power(int a, int b, int c) {
    int result = 1;
    a = a % c;
    while (b > 0) {
        if (b % 2 == 1)
            result = (result * a) % c;
        a = (a * a) % c;
        b /= 2;
    }
    return result;
}

// Fermat Primality Test
bool is_prime(int p) {
    if (p < 2 || p % 2 == 0) return false;
    return power(2, p - 1, p) == 1;
}

int generate_prime(int bits) {
    int min_val = 1 << (bits - 1);
    int max_val = (1 << bits) - 1;
    int p;
    do {
        p = min_val + rand() % (max_val - min_val);
    } while (!is_prime(p));
    return p;
}

// Generator for a Prime Field
int find_generator(int p) {
    for (int g = 2; g < p; ++g) {
        if (power(g, (p - 1) / 2, p) != 1 && power(g, (p - 1) / 3, p) != 1)
            return g;
    }
    return -1;
}

// Key Generation
tuple<int, int, int, int> generate_keys(int bits) {
    int q = generate_prime(bits);
    int g = find_generator(q);
    int min_key = 1 << (bits / 2);
    int private_key = min_key + rand() % (q - min_key);
    int public_key = power(g, private_key, q);
    return {q, g, private_key, public_key};
}